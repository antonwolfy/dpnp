name: Conda package

on:
  push:
    branches:
      - master
  pull_request:

env:
  PACKAGE_NAME: dpnp
  MODULE_NAME: dpnp
  CHANNELS: '-c dppy/label/dev -c intel -c defaults --override-channels'
  VER_JSON_NAME: 'version.json'
  VER_SCRIPT1: "import json; f = open('version.json', 'r'); j = json.load(f); f.close(); "
  VER_SCRIPT2: "d = j['dpnp'][0]; print('='.join((d[s] for s in ('version', 'build'))))"

jobs:
  build_linux:
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash -l {0}

    strategy:
      matrix:
        python: ['3.8', '3.9']

    env:
      conda-pkgs: '/home/runner/conda_pkgs_dir/'
      conda-bld: '/usr/share/miniconda3/envs/build/conda-bld/linux-64/'

    steps:
      - name: Checkout DPNP repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Checkout oneDPL
        uses: actions/checkout@v3
        with:
          repository: oneapi-src/oneDPL
          path: oneDPL
          ref: oneDPL-2021.7.0-release

      - name: Setup miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python }}
          miniconda-version: 'latest'
          activate-environment: 'build'
          use-only-tar-bz2: true

      - name: Install conda-build
        run: conda install conda-build

      - name: Cache conda packages
        uses: actions/cache@v3
        env:
          CACHE_NUMBER: 1  # Increase to reset cache
        with:
          path: ${{ env.conda-pkgs }}
          key:
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-python-${{ matrix.python }}-${{hashFiles('**/meta.yaml') }}
          restore-keys: |
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-python-${{ matrix.python }}-
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-

      - name: Build conda package
        run: conda build --no-test --python ${{ matrix.python }} ${{ env.CHANNELS }} conda-recipe
        env:
          DPLROOT: '${{ github.workspace }}/oneDPL'

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PACKAGE_NAME }} ${{ runner.os }} Python ${{ matrix.python }}
          path: ${{ env.conda-bld }}${{ env.PACKAGE_NAME }}-*.tar.bz2

  build_windows:
    runs-on: windows-latest

    defaults:
      run:
        shell: cmd /C CALL {0}

    strategy:
      matrix:
        python: ['3.8', '3.9']

    env:
      conda-pkgs: 'C:\Users\runneradmin\conda_pkgs_dir\'
      conda-bld: 'C:\Miniconda3\envs\build\conda-bld\win-64\'

    steps:
      - name: Create dir
        run: |
          mkdir -p D:\a\dpnp\dpnp\channel\win-64\
          mkdir -p D:\a\dpnp\dpnp\channel\win-64\unpack\

      - name: Download a file
        uses: carlosperate/download-file-action@v1
        with:
          file-url: 'https://anaconda.org/dppy/dpnp/0.10.1/download/win-64/dpnp-0.10.1-py39h2e52968_38.tar.bz2'
          location: 'D:\a\dpnp\dpnp\channel\win-64\'

      - name: Test step for debug
        run: |
          dir D:\a\dpnp\dpnp\channel\win-64\
          dir D:\a\dpnp\dpnp\channel\win-64\unpack\
          python -c "import shutil; shutil.unpack_archive(D:\a\dpnp\dpnp\channel\win-64\dpnp-0.10.1-py39h2e52968_38.tar.bz2, extract_dir=D:\a\dpnp\dpnp\channel\win-64\unpack\)"
          dir D:\a\dpnp\dpnp\channel\win-64\
          dir D:\a\dpnp\dpnp\channel\win-64\unpack\

      - name: Checkout DPNP repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Checkout oneDPL
        uses: actions/checkout@v3
        with:
          repository: oneapi-src/oneDPL
          path: oneDPL
          ref: oneDPL-2021.7.0-release

      - name: Setup miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python }}
          miniconda-version: 'latest'
          activate-environment: 'build'
          use-only-tar-bz2: true

      - name: Cache conda packages
        uses: actions/cache@v3
        env:
          CACHE_NUMBER: 1  # Increase to reset cache
        with:
          path: ${{ env.conda-pkgs }}
          key:
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-python-${{ matrix.python }}-${{hashFiles('**/meta.yaml') }}
          restore-keys: |
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-python-${{ matrix.python }}-
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-

      - name: Install conda-build
        run: conda install conda-build

      - name: Build conda package
        run: conda build --no-test --python ${{ matrix.python }} ${{ env.CHANNELS }} conda-recipe
        env:
          DPLROOT: '%GITHUB_WORKSPACE%\oneDPL'

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PACKAGE_NAME }} ${{ runner.os }} Python ${{ matrix.python }}
          path: ${{ env.conda-bld }}${{ env.PACKAGE_NAME }}-*.tar.bz2

  test_linux:
    needs: build_linux

    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash -l {0}

    strategy:
      matrix:
        python: ['3.8', '3.9']
        dpctl: ['0.13.0']
        experimental: [true]

    continue-on-error: ${{ matrix.experimental }}

    env:
      conda-pkgs: '/home/runner/conda_pkgs_dir/'
      channel-path: '${{ github.workspace }}/channel/'
      pkg-path-in-channel: '${{ github.workspace }}/channel/linux-64/'
      extracted-pkg-path: '${{ github.workspace }}/pkg/'
      tests-path: '${{ github.workspace }}/pkg/info/test/'
      ver-json-path: '${{ github.workspace }}/version.json'

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.PACKAGE_NAME }} ${{ runner.os }} Python ${{ matrix.python }}
          path: ${{ env.pkg-path-in-channel }}

      - name: Extract package archive
        run: |
          mkdir -p ${{ env.extracted-pkg-path }}
          tar -xvf ${{ env.pkg-path-in-channel }}/${{ env.PACKAGE_NAME }}-*.tar.bz2 -C ${{ env.extracted-pkg-path }}

      - name: Setup miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python }}
          miniconda-version: 'latest'
          activate-environment: 'test'

      # Needed to be able to run conda index
      - name: Install conda-build
        run: conda install conda-build

      - name: Create conda channel
        run: conda index ${{ env.channel-path }} || exit 1

      - name: Test conda channel
        run: |
          conda search ${{ env.PACKAGE_NAME }} -c ${{ env.channel-path }} --override-channels --info --json > ${{ env.ver-json-path }}
          cat ${{ env.ver-json-path }}

      - name: Collect dependencies
        run: |
          export PACKAGE_VERSION=$(python -c "${{ env.VER_SCRIPT1 }} ${{ env.VER_SCRIPT2 }}")
          conda install ${{ env.PACKAGE_NAME }}=${PACKAGE_VERSION} python=${{ matrix.python }} ${{ env.TEST_CHANNELS }} --only-deps --dry-run > lockfile
          cat lockfile
        env:
          TEST_CHANNELS: '-c ${{ env.channel-path }} ${{ env.CHANNELS }}'

      - name: Cache conda packages
        uses: actions/cache@v3
        env:
          CACHE_NUMBER: 1  # Increase to reset cache
        with:
          path: ${{ env.conda-pkgs }}
          key:
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-python-${{ matrix.python }}-${{hashFiles('lockfile') }}
          restore-keys: |
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-python-${{ matrix.python }}-
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-

      - name: Install dpnp
        run: |
          export PACKAGE_VERSION=$(python -c "${{ env.VER_SCRIPT1 }} ${{ env.VER_SCRIPT2 }}")
          conda install ${{ env.PACKAGE_NAME }}=${PACKAGE_VERSION} dpctl=${{ matrix.dpctl }} pytest python=${{ matrix.python }} ${{ env.TEST_CHANNELS }}
        env:
          TEST_CHANNELS: '-c ${{ env.channel-path }} ${{ env.CHANNELS }}'

      - name: List installed packages
        run: conda list

      - name: Smoke test
        run: python -c "import dpnp, dpctl; dpctl.lsplatform()"

      - name: Run tests
        run: |
          # TODO: run the whole scope once the issues on CPU are resolved
          python -m pytest -q -ra --disable-warnings -vv ${{ env.tests-path }}/tests/test_arraycreation.py \
            ${{ env.tests-path }}/tests/test_dparray.py \
            ${{ env.tests-path }}/tests/test_mathematical.py
        env:
          SYCL_ENABLE_HOST_DEVICE: '1'

  test_windows:
    needs: build_windows

    runs-on: windows-latest

    defaults:
      run:
        shell: cmd /C CALL {0}

    strategy:
      matrix:
        python: ['3.8', '3.9']
        dpctl: ['0.13.0']
        experimental: [true]

    continue-on-error: ${{ matrix.experimental }}

    env:
      conda-pkgs: 'C:\Users\runneradmin\conda_pkgs_dir\'
      channel-path: '${{ github.workspace }}\channel\'
      pkg-path-in-channel: '${{ github.workspace }}\channel\win-64\'
      extracted-pkg-path: '${{ github.workspace }}\pkg\'
      tests-path: '${{ github.workspace }}\pkg\info\test\'
      ver-json-path: '${{ github.workspace }}\version.json'

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.PACKAGE_NAME }} ${{ runner.os }} Python ${{ matrix.python }}
          path: ${{ env.pkg-path-in-channel }}

      - name: Extract package archive
        run: |
          mkdir -p ${{ env.extracted-pkg-path }}
          dir ${{ env.pkg-path-in-channel }}
          dir ${{ env.extracted-pkg-path }}

          set SEARCH_SCRIPT="DIR ${{ env.pkg-path-in-channel }} /s/b | FINDSTR /r "dpnp-.*\.tar\.bz2""
          FOR /F "tokens=* USEBACKQ" %%F IN (`%SEARCH_SCRIPT%`) DO (
            SET FULL_PACKAGE_PATH=%%F
          )
          echo FULL_PACKAGE_PATH: %FULL_PACKAGE_PATH%
          echo extracted-pkg-path: ${{ env.extracted-pkg-path }}
          echo "full-pkg-path=%FULL_PACKAGE_PATH%" >> $GITHUB_ENV
      # tar -xvf "%FULL_PACKAGE_PATH%" -C "${{ env.extracted-pkg-path }}"
      # dir ${{ env.extracted-pkg-path }}

      - name: Extract tgz
        uses: ihiroky/extract-action@v1
        with:
          file_path: '${{ env.full-pkg-path }}'
          # extract_dir: "${{ env.extracted-pkg-path }}"
          extract_dir: 'D:\a\dpnp\dpnp\pkg'
          verbose: true

      - name: Setup miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python }}
          miniconda-version: 'latest'
          activate-environment: 'test'

      # Needed to be able to run conda index
      - name: Install conda-build
        run: conda install conda-build

      - name: Create conda channel
        run: conda index ${{ env.channel-path }} || exit 1

      - name: Test conda channel
        run: |
          conda search ${{ env.PACKAGE_NAME }} -c ${{ env.channel-path }} --override-channels --info --json > ${{ env.ver-json-path }}
          more ${{ env.ver-json-path }}

      - name: Collect dependencies
        run: |
          set "SCRIPT=${{ env.VER_SCRIPT1 }} ${{ env.VER_SCRIPT2 }}"
          FOR /F "tokens=* USEBACKQ" %%F IN (`python -c "%SCRIPT%"`) DO (
             SET PACKAGE_VERSION=%%F
          )
          conda install ${{ env.PACKAGE_NAME }}=%PACKAGE_VERSION% python=${{ matrix.python }} ${{ env.TEST_CHANNELS }} --only-deps --dry-run > lockfile
          more lockfile
        env:
          TEST_CHANNELS: '-c ${{ env.channel-path }} ${{ env.CHANNELS }}'

      - name: Cache conda packages
        uses: actions/cache@v3
        env:
          CACHE_NUMBER: 1  # Increase to reset cache
        with:
          path: ${{ env.conda-pkgs }}
          key:
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-python-${{ matrix.python }}-${{hashFiles('lockfile') }}
          restore-keys: |
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-python-${{ matrix.python }}-
            ${{ runner.os }}-conda-${{ env.CACHE_NUMBER }}-

      - name: Install dpnp
        run: |
          set "SCRIPT=${{ env.VER_SCRIPT1 }} ${{ env.VER_SCRIPT2 }}"
          FOR /F "tokens=* USEBACKQ" %%F IN (`python -c "%SCRIPT%"`) DO (
             SET PACKAGE_VERSION=%%F
          )
          conda install ${{ env.PACKAGE_NAME }}=%PACKAGE_VERSION% dpctl=${{ matrix.dpctl }} pytest python=${{ matrix.python }} ${{ env.TEST_CHANNELS }}
        env:
          TEST_CHANNELS: '-c ${{ env.channel-path }} ${{ env.CHANNELS }}'

      - name: List installed packages
        run: conda list

      - name: Smoke test
        run: python -c "import dpnp, dpctl; dpctl.lsplatform()"

      - name: Run tests
        run: |
          # TODO: run the whole scope once the issues on CPU are resolved
          python -m pytest -q -ra --disable-warnings -vv ${{ env.tests-path }}\tests\test_arraycreation.py \
            ${{ env.tests-path }}\tests\test_dparray.py \
            ${{ env.tests-path }}\tests\test_mathematical.py
        env:
          SYCL_ENABLE_HOST_DEVICE: '1'

  upload_linux:
    needs: test_linux

    if: ${{github.ref == 'refs/heads/master' || (startsWith(github.ref, 'refs/heads/release') == true) || github.event_name == 'push' && contains(github.ref, 'refs/tags/')}}

    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash -l {0}

    strategy:
      matrix:
        python: ['3.8', '3.9']

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.PACKAGE_NAME }} ${{ runner.os }} Python ${{ matrix.python }}

      - name: Setup miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python }}
          miniconda-version: 'latest'
          activate-environment: 'upload'

      - name: Install anaconda-client
        run: conda install anaconda-client

      - name: Upload
        env:
          ANACONDA_TOKEN: ${{ secrets.ANACONDA_TOKEN }}
        run: anaconda --token ${{ env.ANACONDA_TOKEN }} upload --user dppy --label dev ${{ env.PACKAGE_NAME }}-*.tar.bz2

  upload_windows:
    needs: test_windows

    if: ${{github.ref == 'refs/heads/master' || (startsWith(github.ref, 'refs/heads/release') == true) || github.event_name == 'push' && contains(github.ref, 'refs/tags/')}}

    runs-on: windows-latest

    defaults:
      run:
        shell: cmd /C CALL {0}

    strategy:
      matrix:
        python: ['3.8', '3.9']
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.PACKAGE_NAME }} ${{ runner.os }} Python ${{ matrix.python }}

      - name: Setup miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          python-version: ${{ matrix.python }}
          miniconda-version: 'latest'
          activate-environment: 'upload'

      - name: Install anaconda-client
        run: conda install anaconda-client

      - name: Upload
        env:
          ANACONDA_TOKEN: ${{ secrets.ANACONDA_TOKEN }}
        run: anaconda --token ${{ env.ANACONDA_TOKEN }} upload --user dppy --label dev ${{ env.PACKAGE_NAME }}-*.tar.bz2
